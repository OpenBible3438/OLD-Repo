<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.mapper.gymMapper">

	<resultMap id="gymLogin" type="map"/>
	<resultMap id="gymCont" type="map"/>
	<resultMap id="getImage" type="object">
		<result property="filedata" column="FILEDATA" jdbcType="BLOB"/>
	</resultMap>
	<resultMap id="getCont" type="map">
		<result property="filedata" column="FILEDATA" jdbcType="BLOB"/>
		<result property="filesize" column="FILESIZE" jdbcType="DOUBLE"/>
	</resultMap>
<!-- ======================= GYM ======================= -->
	<select id="getClassList" parameterType="map" resultType="map">
		SELECT rownum, cls.cls_no, cls.cls_name, cls.cls_kind, cls.cls_cnt, cls.cls_days, cls.cls_s_date
					 , cls.cls_e_date, cls.cls_price, cls.cls_state, cls.cls_info
					 , cls.cls_stime, cls.cls_etime, cls.cls_day
					 , tch.tch_name , tch.tch_no
					 , type.type_name, type.type_no
		  FROM class  cls, teacher tch, type type
		 WHERE cls.tch_no = tch.tch_no
		   AND cls.type_no = type.type_no
	<if test="progress!=null and progress.length > 0 ">
	 	   AND cls.cls_state = #{progress}
	</if>
	<if test="cls_no != null">
	 	   AND cls.cls_no = #{cls_no}
	</if>
		<!-- ORDER BY cls_no ASC -->
	</select>
	<!-- 수업 등록 모달 안 강사 -->
	<select id="getComboList" parameterType="map" resultType="map">
		SELECT TYPE, TYPECODE, TYPENAME
		  FROM v_ClsData
		 WHERE gym_no = 0
		    OR gym_no = #{gym_no}	
    </select>
	<!-- 수업 등록 모달 안 종목 -->
	<select id="getTypeNo" parameterType="map" resultType="map">
		SELECT type_no,type_name FROM type
	</select>
	<!-- 자세히 보기 모달 안 event -->
	
	<select id="getClassDetail" parameterType="map" resultType="map">
		SELECT 1 FROM dual
	</select>
	<select id="getClassMemList" parameterType="map" resultType="map">
		SELECT m.mem_id, m.mem_no, m.mem_name, m.mem_nickname, m.mem_gender, m.mem_birth, p.pay_no 
		  FROM member m, pay p
		 WHERE m.mem_no = p.mem_no 
		   AND p.cls_no = #{cls_no}  
		ORDER BY m.mem_no ASC
	</select>
	<select id="getPayMemList" parameterType="map" resultType="map">
		SELECT rownum rno, mem_no, mem_id, mem_name, mem_nickname, mem_tel, mem_joindate, mem_gender, mem_birth
		  FROM member
		 <where>
		 <if test="mem_no != null">
		 		AND mem_no = #{mem_no}
		 </if>
		 </where>
		 ORDER BY mem_no asc
	</select>
	<select id="getNoticeList" parameterType="map" resultType="map">
		SELECT rownum, not_date, not_time, notice_no, not_title, not_cont, gym_no
		  FROM notice
		<where>
			<if test="gym_no!=null and gym_no.length>0">
				AND gym_no = #{gym_no}
			</if>
			<if test="notice_no!=null and notice_no.length>0">
				AND notice_no = #{notice_no}
			</if>
			<if test="not_title!=null and not_title.length>0">
				AND not_title LIKE '%'||#{not_title}||'%'
			</if>
			<if test="not_cont!=null and not_cont.length>0">
				AND not_cont LIKE '%'||#{not_cont}||'%'
			</if>
		</where>
		 ORDER BY notice_no DESC
	</select>
	<select id="getChartList" parameterType="map" resultType="map">
		SELECT 1 FROM dual
	</select>
	<select id="getContentList" parameterType="map" statementType="CALLABLE">
		<!-- ==========편성경여기========== -->
			{ call proc_GymContList(#{gym_no}, #{gymCont
				                               ,jdbcType=CURSOR
				                               ,mode=OUT
				                               ,javaType=java.sql.ResultSet
				                               ,resultMap=gymCont}
				                               )}
	</select>
	<select id="getInfoList" parameterType="map" resultType="map">
		SELECT gym_id, gym_username, gym_usertell, gym_name, gym_tel, gym_addr, gym_addr_dtl
		     , gym_zipcode, gym_number, gym_info
		     , gym_parking, gym_wash, gym_uniform, gym_locker, gym_like
		  FROM gym
		 WHERE gym_no = #{gym_no} 
	</select>
	<select id="getReviewList" parameterType="map" resultType="map">
		<!-- ==========편성경여기========== -->
		SELECT rev_seq, rev_cont, rev_date, rev_time, rev_star, rev_up, rev_down
		  FROM REVIEW
	</select>
	<!-- 매장 로그인  -->
	<select id="getLogin" parameterType="map" resultType="map">
		SELECT gym_no, gym_name
		  FROM gym
		 WHERE rownum = 1
		   AND gym_id = #{gym_id}
		   AND gym_pw = #{gym_pw}
	</select>
	<!-- 매장 로그인  프로시저 -->
	<select id="getProcLogin"  parameterType="map" statementType="CALLABLE">
		{ call proc_gym_login(#{gym_id},#{gym_pw},#{gymLogin
						                           ,jdbcType=CURSOR
						                           ,mode=OUT
						                           ,javaType=java.sql.ResultSet
						                           ,resultMap=gymLogin})}
	</select>
	<!-- 매장 아이디 중복확인  -->
	<select id="getIdConfirm" parameterType="map" resultType="int">
		SELECT nvl((
	               SELECT count(gym_id)
	                 FROM gym
	                WHERE rownum=1
	                  AND gym_id = #{gym_id} ),0) as ok
	  	  FROM dual
	</select>
	<!-- 매장 프로필 사진 가져오기  -->
	<select id="gymProfImage" parameterType="map" resultMap="getImage">
		SELECT filedata  
		  FROM images
		 WHERE type = 'gym'
		   AND typecode = 5 
	</select><!-- #{gym_no} -->
	
	<!-- 매장 콘텐츠 정보 가져오기  -->
	<select id="gymContImage" parameterType="map" resultMap="getCont">
		SELECT filename, filesize, filedata
		  FROM images
		 WHERE type = 'gym'
		<if test="file_seq != null">
		   AND file_seq = #{file_seq}
		</if>
		<if test="typecode != null">
		   AND typecode = #{typecode}
		</if>
	</select><!-- #{gym_no} --><!--  AND typecode = 6 -->
	
	<!-- 이미지 가져오기  -->
	<select id="getImages" parameterType="map" resultMap="getImage">
		SELECT filedata
		  FROM images
		 WHERE file_seq = #{file_seq}
	</select><!-- #{file_seq} -->
	
	<!-- 매장 회원가입 인서트 -->
	<insert id="gymJoin" parameterType="map">
		INSERT INTO gym (gym_no 
		                ,gym_id ,gym_pw ,gym_username ,gym_usertell
                        ,gym_name ,gym_tel     ,gym_addr   ,gym_addr_dtl ,gym_zipcode
                        ,gym_number ,gym_info    ,gym_lat    ,gym_lng      
                        ,gym_parking ,gym_wash   ,gym_uniform ,gym_locker ,gym_like )
                  VALUES((SELECT max(gym_no)+1 FROM gym)
                        ,#{j_gym_id} ,#{j_gym_pw} ,#{gym_username} ,#{gym_usertell} 
                        ,#{gym_name}   ,#{gym_tel} ,#{gym_addr} ,#{gym_addr_dtl} ,#{gym_zipcode}
                        ,#{gym_number} ,#{gym_info} ,#{gym_lat} ,#{gym_lng}
                        ,#{gym_parking}  ,#{gym_wash}  ,#{gym_uniform}  ,#{gym_locker}  ,0 )
	</insert>
	<!-- 매장 회원가입 프로필사진 인서트 --><!-- (SELECT max(file_seq)+1 FROM images) -->
	<insert id="gymJoinImg" parameterType="map">
		INSERT INTO images(file_seq
		                  ,filename  ,filesize
		                  ,filedata
		                  ,type ,typecode)
                    VALUES((SELECT max(file_seq)+1 FROM images)
                          ,#{filename}  ,#{filesize}
                          ,#{filedata   ,jdbcType=LONGVARBINARY} 
                          ,#{type}      ,6 )
	</insert>
	<insert id="classIns" parameterType="map">	
		INSERT INTO class(cls_no
		                 ,tch_no
		                 ,gym_no
		                 ,type_no 
		                 ,cls_name
		                 ,cls_kind
		                 ,cls_cnt
		                 ,cls_days                
		                 ,cls_s_date
		                 ,cls_e_date
		                 ,cls_info
		                 ,cls_price
		                 ,cls_state
		                 ,cls_like
		                 ,cls_stime
		                 ,cls_etime
		                 ,cls_day)
		          VALUES ((select max(cls_no)+1 FROM class)
		                 ,#{ins_tch_no}
		                 ,#{gym_no}
		                 ,#{ins_type_no}
		                 ,#{ins_cls_name}
		                 ,#{ins_cls_kind}
		                 ,#{ins_cls_cnt}
		                 ,func_ESDate(#{ins_cls_e_date},#{ins_cls_s_date})          
		                 ,#{ins_cls_s_date}
		                 ,#{ins_cls_e_date}
		                 ,#{ins_cls_info}
		                 ,#{ins_cls_price}
		                 ,#{ins_cls_state}
		                 ,0
		                 ,#{ins_cls_sTime}
		                 ,#{ins_cls_eTime}
		                 ,#{ins_cls_day})
	</insert>
	<insert id="classMemIns" parameterType="map">
		INSERT INTO pay(pay_no
		               ,mem_no
		               ,cls_no
		               ,pay_state
		               ,pay_date
		               ,pay_time)
		         VALUES((SELECT max(pay_no)+1 FROM pay)
		               ,#{c_mem_no}
		               ,#{cls_no}
		               ,'매장 결제'
		               ,to_char(sysdate,'yyyy-mm-dd')
		               ,to_char(sysdate,'hh24:mi:ss')
		               )					   
	</insert>
	<insert id="gymNoticeIns" parameterType="map">
		INSERT into notice (notice_no, not_seq, not_title, not_cont, gym_no, not_date, not_time)
		VALUES(func_getnoticeno(#{gym_no}), seq_notice.nextval, #{not_title}, #{not_cont}, #{gym_no}, TO_CHAR(sysdate, 'YYYY-MM-DD'), TO_CHAR(sysdate, 'HH:mm:ss'))
	</insert>
	<insert id="chartIns" parameterType="map">
		INSERT into insert_test values('1', '1', '1')
	</insert>
	<insert id="contentIns" parameterType="map">
		<!-- ==========편성경여기========== -->
		<!-- INSERT into GYM_CONTENTS (gym_cont_seq, gym_no,gym_contents,gym_cont_like, gym_cont_date, gym_cont_time) 
		values('6','1',#{cont_contents},'0', to_char(sysdate,'YYYY-MM-DD'), to_char(sysdate, 'HH24:MI:SS')) -->
		{ call proc_GymContIns(#{gym_no},#{gym_contents}, to_char(sysdate,'YYYY-MM-DD'), to_char(sysdate, 'HH24:MI:SS')
							  ,#{filename}
							  ,#{filesize}
							  ,#{filedata,jdbcType=LONGVARBINARY}
							  ,#{result
	                            ,jdbcType=VARCHAR
	                            ,mode=OUT}) }
	</insert>
	
	<update id="classUpd" parameterType="map">
		  UPDATE class 
		     SET tch_no = #{upd_tch_no}
		        ,type_no = #{upd_type_no}
		        ,cls_name = #{upd_cls_name}
		        ,cls_kind = #{upd_cls_kind}
		        ,cls_cnt = #{upd_cls_cnt}
		        ,cls_days = func_ESDate(#{upd_cls_e_date},#{upd_cls_s_date})
		        ,cls_s_date = #{upd_cls_s_date}
		        ,cls_e_date = #{upd_cls_e_date}
		        ,cls_info = #{upd_cls_info}
		        ,cls_price = #{upd_cls_price}
		        ,cls_state = #{upd_cls_state}
		        ,cls_stime = #{upd_cls_sTime}
		        ,cls_etime = #{upd_cls_eTime}
		        ,cls_day = #{upd_cls_day}
		   WHERE cls_no = #{cls_no}  
		     AND gym_no = #{gym_no}		   
		   
	</update>
	<!-- 수강생 삭제 버튼이지만 수강생 수정이 일어난다. -->
	<update id="classMemUpd" parameterType="map">
		UPDATE pay SET pay_state='매장 환불' WHERE pay_no = #{pay_no}
	</update>
	<update id="gymNoticeUpd" parameterType="map">
		UPDATE notice set not_title = #{not_title}, not_cont = #{not_cont}
		 WHERE notice_no = #{notice_no}
		   AND gym_no = #{gym_no}
	</update>
	<update id="chartUpd" parameterType="map">
		UPDATE insert_test set mem_name='1' WHERE mem_id='1'
	</update>
	<update id="contentUpd" parameterType="map">
		<!-- ==========편성경여기========== -->
		UPDATE GYM_CONTENTS set gym_contents = #{contents_upd} 
		 WHERE gym_cont_seq = #{contUpd_seq}
	</update>
	<update id="gymInfoUpd" parameterType="map">
		UPDATE gym set gym_pw = #{gym_pw}, gym_username = #{gym_username}
			 , gym_usertell = #{gym_usertell}, gym_tel = #{gym_tel}
			 , gym_addr = #{gym_addr}, gym_addr_dtl = #{gym_addr_dtl}
			 , gym_number = #{gym_number}, gym_info = #{gym_info}
			 , gym_parking = #{gym_parking}, gym_wash = #{gym_wash}
			 , gym_locker = #{gym_locker}, gym_uniform = #{gym_uniform}
		 WHERE gym_no = #{gym_no}
	</update>
	
	<delete id="classDel" parameterType="map">
		DELETE insert_test where mem_id = '5'
	</delete>
	<delete id="classMemDel" parameterType="map">
		DELETE insert_test where mem_id = '5'
	</delete>
	<delete id="gymNoticeDel" parameterType="map">
		DELETE notice
		WHERE gym_no = #{gym_no}
		  AND notice_no = #{notice_no}
	</delete>
	<delete id="chartDel" parameterType="map">
		DELETE insert_test where mem_id = '5'
	</delete>
	<delete id="contentDel" parameterType="map">
		<!-- ==========편성경여기========== -->
		DELETE GYM_CONTENTS 
		 WHERE gym_cont_seq = #{contDel_seq}
	</delete>
	
</mapper>